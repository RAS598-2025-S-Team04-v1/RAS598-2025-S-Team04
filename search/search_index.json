{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"RAS598-Team04 <p>Tracking position and force using OptiTrack and a force gauge.</p> Updated 04/14/2025"},{"location":"#a-about","title":"A. About","text":"Team Number 04 Team Members Vijaya Malhaar Gaddam, Harshavardhan Karancheti Semester, Year Spring, 2025 Professor Dr. Daniel Aukes University Arizona State University"},{"location":"#b-the-project","title":"B. The Project","text":"The objective of this experiment is to validate the stiffness and porjectile of the ankle of a pogo stick type model in a lab environment. This project will help investigate the impact of varying release heights, release angle, and object characteristics which will be used to establish parameters and compare to the simulations."},{"location":"#c-research-question","title":"C. Research Question","text":"<p> \"How do we get simulation parameters to measure the stiffness and projectile of an ankle design for stability in a quadruped?\" </p>   This study contributes to modeling research by evaluating robotic parts designs in various manufacturing and logistics applications."},{"location":"#d-concept","title":"D. Concept","text":"The project involves using two setups: 1. OptiTrack via ROS2 to drop test objects at predetermined positions. A vision system, will record drop points and trajectories  2. A force gauge is attached to the test object to measure the stiffness and deformation. The setup will fixate the test object to the ground and force will be measured at different displacements which forms data to find the best fit for the stiffness of the prototype  The experiment analyzes how factors such as object weight and shape influence it and how it relates to the simulation readings. ROS2 software will use a node to publish the sensors to ensure repeatability in the experiment. The process flow chart of our project is shown in the chart below."},{"location":"#optitrack-setup","title":"OptiTrack setup","text":"-  Project Setup:  The setup contains an object which, for this project, an prototype of a ankle + leg of a quadruped similar to a pogostick model, with a OptiTrack continaing IR reflectors and vision system ready to record data.  -  Define Experiment Parameters:  Points of placement of reflector sensors are selected along with angles and heights to drop from.  -  ROS-Based Software Configuration:  The data of the movement from the OptiTrack are published and subscribed via ROS2 software to visualize the data. A GUI is also constructed using PyQT5 which will:    1. Visualize the Data (2-D Plot of Position and Orientation with respect to time)    2. Contain a button to start and stop recording     3. A recording system to save the data into a _bagfile_ or a _csv_ file    - Conduct Experiment:  The prototype is physically dropped, with the sensors and vision system recording the drop locations and trajectories, and deformation values   -  Data Collection:  Vision system and sensor data are collected, such as trajectories    -  Analysis:  Data are visualized on a graph using PyQT  -  Iterate (if necessary):  Conduct experiments with adjusted parameters if needed for confirmation  -  Report Findings:  Findings are compiled, and conclusions are provided for simulations and future improvements"},{"location":"#e-sensor-intergration","title":"E. Sensor Intergration","text":"This project aims to develop a ROS 2-based robotic manipulation system that integrates  OptiTrack motion capture technology , and force gauge for measuring simulation parameters. The goal is to drop them from a random height and angle and utilize the OptiTrack and find the projected trajectories. ROS2 will be used for processing and obtaining sensor information and real-time communication, ensuring seamless coordination between different sensor data. This experiment will help in supporting the simulation data of a similar model in MujoCo.  The OptiTrack motion capture system will provide for improved tracking. By leveraging ROS 2\u2019s distributed architecture, this project will enhance trajectory adaptation in real-time. The combination of motion capture (OptiTrack) will enable high-accuracy object handling. The findings from this experiment will have broader applications in industrial automation, assistive robotics, and testing."},{"location":"#f-interface","title":"F. Interface","text":"The sensor data will be obtained using ROS2, leveraging MuJoCo for simulation comparision and custom ROS2 nodes for real-time interaction. The behavior of the robot will be influenced through:  1.  Vision-based Perception: OptiTrack motion capture data will be fused to provide high-accuracy object localization.  2.  Adaptive Motion Planning: ROS2 will handle trajectory updates dynamically, allowing the robot to adjust its movements based on real-time feedback.  Interfaces for Interaction, Visualization, and Data Storage  To facilitate monitoring and user interaction, the following interfaces will be developed:   1.  Simulation:  Used for real-time visualization of the robot\u2019s workspace under control environment, including object positions, planned trajectories, and motion execution.   2. Web-Based Dashboard:  A user-friendly interface displaying object tracking data, and force gauge readings.    3. Data Logging System:  All relevant data (object positions, timestamps, drop locations, and trajectory corrections) will be stored in a ROS 2-based database for post-experiment analysis."},{"location":"#g-control-and-autonomy","title":"G. Control and Autonomy","text":"A low-latency feedback loop  will be established to provide real-time feedback to the UR5 controller where sensor data is processed and transmitted.   This enables the UR5 inverse kinematics and control algorithms to dynamically adjust grip strength and drop execution in real-time.    A High-Level decision-making module  will also read long-term trends from sensor feedback to make higher-level decisions. When systematic errors in drop accuracy occur, the system will adjust its release strategies, i.e., altering grip pressure or release angles, to improve performance."},{"location":"#h-resources-needed","title":"H. Resources needed","text":"Since we heavily require camera sensing and sensor fusion, we would be needing knowledge about Control Systems and Autonomous Algorithms, Computer Vision, Object tracking and Sensor Fusion and Filtering Techniques. To run simulations for data comparisions, we would also need knowledge of Mujoco. Furthemore, self study and expert advice will go a long way in covering the gaps."},{"location":"#i-final-demonstration","title":"I. Final Demonstration","text":""},{"location":"#resources-needed-from-idealab","title":"Resources needed from IDEALab","text":"1. OptiTrack Motion Capture System \u2013  Infrared cameras for real-time tracking   2. Force Gauge -  For studying stiffness    3. Computer with GPU Support \u2013  High-performance system for ROS2 and computer vision   4. Network Infrastructure \u2013  Ethernet and/or Wi-Fi for seamless communication   5. Test Object -  Quadruped Robot or a prototype"},{"location":"#changes-in-environmental-conditions","title":"Changes in environmental conditions:","text":"1.  To handle variability in the environment, the robot will leverage sensor fusion by combining OptiTrack motion capture for global positioning and force gauge for precise local object tracking, ensuring robust localization and more research data.   2.  In case of misalignment, the system will implement error recovery strategies, such as reattempting detection and adjusting the pick position. Additionally, ROS 2-based dynamic reconfiguration will allow real-time parameter tuning and trajectory modifications, supported by a web-based interface for manual overrides. This integrated approach ensures the system remains resilient and adaptable in dynamic environments, maintaining precise and reliable object manipulation."},{"location":"#j-impact","title":"J. Impact","text":"Our team has no prior experience with ROS2, sensor fusion, or object detection, making this a valuable challenge for us to advance in robotic experimentation. We are focused on developing a robust and standalone test procedure for dropping test materials from a height.    This process can be applied to material testing, orientation-based drop tests, impact conditioning, and assessing real-world behavior under critical conditions. Such a testing framework could significantly enhance rescue operations by evaluating the impact on a robot when deployed from higher floors, such as the 4th or 5th, ensuring better reliability in high-stakes scenarios."},{"location":"#k-advising","title":"K. Advising","text":"We will be mentored by Dr. Daniel M. Aukes, who has expressed his interest in providing mentoring and access to state-of-the-art hardware facilities. Dr. Aukes' guidance will be a key factor in ensuring the technical aspects of the project are addressed effectively. His demands involve regular progress tracking, strict adherence to project milestones, and active participation in troubleshooting sessions. Other facilities, such as laboratory access and state-of-the-art simulation tools, have been guaranteed to aid in our experimental setup."},{"location":"#timeline","title":"Timeline","text":"<p> Figure : Timeline of our experimenting. (recently updated) </p> <p></p>"},{"location":"#update-1-04132025","title":"Update #1 - 04/13/2025","text":""},{"location":"#changes-in-goal-statement","title":"Changes in goal statement","text":"Previously, we were of the idea of using a UR5 to test the repeatability and drop test our quadruped with an added ankle attachment for stability. But considering timeline and limitation constraints, we changed our goal statement to analyzing the position, orientation(drop trajectory) via OptiTrack and stiffness via force gauge. We will be physically dropping testing a part of the quadruped (the ankle attachment) for the study. Sensor data which is filtered will be further analyzed and added as a simulation parameter for a MujoCo simulation adding on to research done by Prof. Aukes.  <p> Figure : Previous timeline that we were following. </p>"},{"location":"ForceGauge/","title":"ForceGauge","text":"<p> Force Gauge </p> Stiffness Measurement via Force Gauge and ROS2 About    The stiffness of the ankle in the pogo stick-type model is characterized through a separate controlled experiment using a force-displacement test setup. This setup is designed to find out loads to the ankle joint and measure the corresponding load, allowing the finding of accurate force-displacement points.  Centered Mermaid Flowchart  graph TD     A[Project Setup] --&gt; B[Define Experiment Parameters]     B --&gt; C[ROS2-Based Software Configuration]     C --&gt; D[Conduct Experiment]     D --&gt; E[Data Collection]     E --&gt; F[Analysis]     F --&gt; G{Iterate?}     G --&gt;|Yes| D     G --&gt;|No| H[Report Findings - find stiffness]  Force Gauge setup    - Project Setup: The setup contains an object which, for this project, a prototype of a ankle + leg of a quadruped similar to a pogostick model, with a Force Gauge ready to record data.    - Define Experiment Parameters: A setup in which the model is fixated to the ground and a string is used to attach the leg and a hook of the force gauge. A set of displacement points are marked and the force gauge readings are taken at those points. The values are graphed out and the best fit is made to find the stiffness.    - ROS-Based Software Configuration: The data of the Force readings are published and subscribed via ROS2 software to visualize the data. A GUI is also constructed using PyQT5 which will:     1. Visualize the Data (2-D Plot of Force data with respect to time).     2. Contain a button to start and stop recording     3. A recording system to save the data into a bagfile or a csv file.    4. Conduct Experiment: The prototype is physically dropped, with the force gauge recording the force values with respect to time.   5. Data Collection: Sensor data are collected, in this case Force and displacement.   6. Analysis: Data are visualized on a graph using PyQT.   7. Iterate (if necessary): Conduct experiments with adjusted parameters if needed for confirmation.   8. Report Findings: Findings are compiled, and conclusions are provided for simulations and future improvements.  Figure 2: Setup for calculating. The displacements will be reached via human hand, preferably via an UR5 to reduce human error.  Figure 3: A variation of the setup for calculating. The displacements is reached with a UR5 with an attached gripper, which eliminates human error .  Hardware Configuration    The specimen or test object is fixated on the ground via supports and screws and via strings, the specimen is attached to the hook attachment of a Force Gauge which is placed horizontally and tensile forces are added onto the ankle component to get the reading.     The Force Gauge will pass through a few marked displacement points and the force readings are plotted to find a best fit.     The hardware involved are:   - Force Gauge: For this experiment, a high-precision digital force gauge is used, a Mark-10 M4-10 force gauge.   - Displacement Measurement: Displacement are marked via a ruler and the force gauge is physically pulled to the displacement points.We also used UR5 which provides us help in studying the effect of displacement and velocity on the stiffness of the ankle attachment.    - Mounting Fixture: A custom test rig is built to hold the ankle in position which will isolate the axis along which the stiffness is being tested. It allows for controlled compression of the ankle ensuring consistent boundary conditions during each test.    - Data Acquisition: Force reading is continuously logged from the gauge via serial interface or USB using a custom ROS2 node.  Data Conditioning and Analysis    - Repeatability Check:   Multiple trials are conducted under identical conditions to assess repeatability and account for any mechanical hysteresis or viscoelastic effects.    - Units and Normalization:   Data is converted into consistent SI units and normalized (if necessary) based on geometry or mass to enable direct comparison with simulation models.  Software Configuration    The force gauge is connected to the system via serial communicator (USB provided by the manufacturer).     The goal of using ROS2 is to serve three purposes:   - To visualize graphically the force readings.   - Create a GUI and show the data, have a button to start and stop recording.   - Upon pressing the button, the GUI will automatically create a csv and ros2bag file, useful for post-processing.     Using ROS2 we created a publisher and subscriber nodes.   - The publisher node will access the data from the serial communicator and publish a topic '\\force_reading' which continuously updates the force reading from the force gauge.   - The subscriber node subscribes the topic and performs the following:   1. Visualizes graphically the force readings.   2. Create a GUI and show the data, have a button to start and stop recording.   3. Upon pressing the button, the GUI will automatically create a csv and ros2bag file, useful for post-processing.  Figure 4: GUI of the force gauge setup  Experimentation    Figure 3 below is the GUI interface used for the experiment. It graphs a live plot of the data as it is being collected, and there are buttons along the bottom that users can press to save specific data points. There is also a live demonstration video included, showing how the data is pulled out in real time as the experiment is being performed.  Figure 5: GUI of the force gauge setup  Video 2: Video of experimentation using hand for studying on the stiffness characteristics.  Video 2: Video of experimentation using UR5 for studying on the stiffness characteristics.  <p></p>  Future plans    We will be adding an OptiTrack to validate our displacement readings, attaching it to the IR markers, along with the UR5. We will also be adding those to the ROS2 interface and add filtering nodes as well."},{"location":"OptiTrack/","title":"OptiTrack","text":"OptiTrack for documenting Positioning and Trajectory Updated 04/14/2025"},{"location":"OptiTrack/#optitrack-setup","title":"OptiTrack Setup","text":"- Project Setup: The setup contains an object which, for this project, is a prototype of an ankle + leg of a quadruped similar to a pogostick model, with reflective markers to facilitate OptiTrack in capturing the data.  - Define Experiment Parameters: The parameters involve setting up the placement of the reflective sensors, and defining the ground frame and the rigid body in the MOTIVE GUI.  - ROS-Based Software Configuration: The OptiTrack sends its data to a software named MOTIVE which can be accessed on the Virtual Machine via Ethernet. ROS2 is used to access and visualize the data. A GUI can also be constructed using PyQT5 which will:   1. Visualize the Data (serially showing the Cartesian coordinates and quaternions with timestamps).   2. Contain a button to start and stop recording.   3. A recording system to save the data into a bagfile or a csv file. - Conduct Experiment: The prototype is physically dropped, and trajectories are tracked by the motion capture system.  - Data Collection: Sensor data are collected, in this case, coordinates and quaternions.  - Analysis: Data are visualized via GUI using PyQT.  - Iterate (if necessary): Conduct experiments with adjusted parameters if needed for confirmation.  - Report Findings: Findings are compiled, and conclusions are provided for simulations and future improvements.  <p> Figure : Setup for calculating. The displacements will be reached via human hand, preferably via an UR5 to reduce human error. </p> <p></p>"},{"location":"OptiTrack/#hardware-configuration","title":"Hardware Configuration","text":"The specimen or test object is physically dropped at a fixed height and angle, and the reflective markers on the specimen measure its movement in the controlled space and its contact with the ground. This helps study the stability of the ankle attachment.  Hardware involved: - OptiTrack: Reflective IR markers and a specialized IR camera setup to accurately track the markers. - Mounting Fixture: The specimen is held by hand and is free-fallen onto the ground. - Data Acquisition: Data is acquired from the MOTIVE software and transmitted via Ethernet."},{"location":"OptiTrack/#data-conditioning-and-analysis","title":"Data Conditioning and Analysis","text":"- Conditioning: A rigid body is configured in MOTIVE with appropriate marker layout and labeling to ensure robust tracking even during rapid motion. Data is streamed into ROS2 via a dedicated bridge. - Filtering: A Savitzky-Golay or low-pass Butterworth filter can be applied to the position data to smooth high-frequency noise. Numerical differentiation is used for computing velocity and acceleration in a dedicated ROS2 node. - Repeatability Check: Multiple trials are conducted under identical conditions to assess repeatability. - Units and Normalization: Data is converted into consistent SI units and normalized (if necessary) for direct comparison with simulation models."},{"location":"OptiTrack/#software-configuration","title":"Software Configuration","text":""},{"location":"OptiTrack/#optitrack-node","title":"OptiTrack Node","text":"- A dedicated bridge node is used to stream 6-DOF pose data from MOTIVE into ROS2. - It publishes a topic: /ankle/pose. - Rigid body configurations are provided via a YAML parameter file."},{"location":"OptiTrack/#filtering-node","title":"Filtering Node","text":"- Applies real-time filtering to remove measurement noise. - Suitable filters include Butterworth or Savitzky-Golay to smooth the position signal. - Outputs include:   - /ankle/pose_filtered   - /ankle/velocity   - /ankle/acceleration"},{"location":"OptiTrack/#node-communication","title":"Node Communication","text":"graph LR   OPTI[/optitrack_node/] --&gt; POSE[/ankle/pose/]   POSE --&gt; FILTER[/filter_node/]   FILTER --&gt; POSEF[/ankle/pose_filtered/]   FILTER --&gt; VEL[/ankle/velocity/]   FILTER --&gt; ACC[/ankle/acceleration/]"},{"location":"OptiTrack/#experimentation","title":"Experimentation","text":"OptiTrack was calibrated for our controlled environment. The video below shows our team working at IDEALab to calibrate and obtain pose data via Python on Windows. Future work involves implementing ROS2 filters to smooth the data in real time."},{"location":"static/node_modules/mathjax/","title":"MathJax","text":""},{"location":"static/node_modules/mathjax/#beautiful-math-in-all-browsers","title":"Beautiful math in all browsers","text":"<p>MathJax is an open-source JavaScript display engine for LaTeX, MathML, and AsciiMath notation that works in all modern browsers.  It was designed with the goal of consolidating the recent advances in web technologies into a single, definitive, math-on-the-web platform supporting the major browsers and operating systems.  It requires no setup on the part of the user (no plugins to download or software to install), so the page author can write web documents that include mathematics and be confident that users will be able to view it naturally and easily.  Simply include MathJax and some mathematics in a web page, and MathJax does the rest.</p> <p>Some of the main features of MathJax include:</p> <ul> <li> <p>High-quality display of LaTeX, MathML, and AsciiMath notation in HTML pages</p> </li> <li> <p>Supported in most browsers with no plug-ins, extra fonts, or special   setup for the reader</p> </li> <li> <p>Easy for authors, flexible for publishers, extensible for developers</p> </li> <li> <p>Supports math accessibility, cut-and-paste interoperability, and other   advanced functionality</p> </li> <li> <p>Powerful API for integration with other web applications</p> </li> </ul> <p>See http://www.mathjax.org/ for additional details about MathJax, and https://docs.mathjax.org for the MathJax documentation.</p>"},{"location":"static/node_modules/mathjax/#mathjax-components","title":"MathJax Components","text":"<p>MathJax version 3 uses files called components that contain the various MathJax modules that you can include in your web pages or access on a server through NodeJS.  Some components combine all the pieces you need to run MathJax with one or more input formats and a particular output format, while other components are pieces that can be loaded on demand when needed, or by a configuration that specifies the pieces you want to combine in a custom way.  For usage instructions, see the MathJax documentation.</p> <p>Components provide a convenient packaging of MathJax's modules, but it is possible for you to form your own custom components, or to use MathJax's modules directly in a node application on a server.  There are web examples showing how to use MathJax in web pages and how to build your own components, and node examples illustrating how to use components in node applications or call MathJax modules directly.</p>"},{"location":"static/node_modules/mathjax/#whats-in-this-repository","title":"What's in this Repository","text":"<p>This repository contains only the component files for MathJax, not the source code for MathJax (which are available in a separate MathJax source repository).  These component files are the ones served by the CDNs that offer MathJax to the web.  In version 2, the files used on the web were also the source files for MathJax, but in version 3, the source files are no longer on the CDN, as they are not what are run in the browser.</p> <p>The components are stored in the <code>es5</code> directory, and are in ES5 format for the widest possible compatibility.  In the future, we may make an <code>es6</code> directory containing ES6 versions of the components.</p>"},{"location":"static/node_modules/mathjax/#installation-and-use","title":"Installation and Use","text":""},{"location":"static/node_modules/mathjax/#using-mathjax-components-from-a-cdn-on-the-web","title":"Using MathJax components from a CDN on the web","text":"<p>If you are loading MathJax from a CDN into a web page, there is no need to install anything.  Simply use a <code>script</code> tag that loads MathJax from the CDN.  E.g.,</p> <pre><code>&lt;script id=\"MathJax-script\" async src=\"https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js\"&gt;&lt;/script&gt;\n</code></pre> <p>See the MathJax documentation, the MathJax Web Demos, and the MathJax Component Repository for more information.</p>"},{"location":"static/node_modules/mathjax/#hosting-your-own-copy-of-the-mathjax-components","title":"Hosting your own copy of the MathJax Components","text":"<p>If you want to host MathJax from your own server, you can do so by installing the <code>mathjax</code> package using <code>npm</code> and moving the <code>es5</code> directory to an appropriate location on your server:</p> <pre><code>npm install mathjax@3\nmv node_modules/mathjax/es5 &lt;path-to-server-location&gt;/mathjax\n</code></pre> <p>Note that we are still making updates to version 2, so include <code>@3</code> when you install, since the latest chronological version may not be version 3.</p> <p>Alternatively, you can get the files via GitHub:</p> <pre><code>git clone https://github.com/mathjax/MathJax.git mj-tmp\nmv mj-tmp/es5 &lt;path-to-server-location&gt;/mathjax\nrm -rf mj-tmp\n</code></pre> <p>Then (in either case) you can use a script tag like the following:</p> <pre><code>&lt;script id=\"MathJax-script\" async src=\"&lt;url-to-your-site&gt;/mathjax/tex-chtml.js\"&gt;&lt;/script&gt;\n</code></pre> <p>where <code>&lt;url-to-your-site&gt;</code> is replaced by the URL to the location where you moved the MathJax files above.</p> <p>See the documentation for details.</p>"},{"location":"static/node_modules/mathjax/#using-mathjax-components-in-a-node-application","title":"Using MathJax components in a node application","text":"<p>To use MathJax components in a node application, install the <code>mathjax</code> package:</p> <pre><code>npm install mathjax@3\n</code></pre> <p>(we are still making updates to version 2, so you should include <code>@3</code> since the latest chronological version may not be version 3).</p> <p>Then require <code>mathjax</code> within your application:</p> <pre><code>require('mathjax').init({ ... }).then((MathJax) =&gt; { ... });\n</code></pre> <p>where the first <code>{ ... }</code> is a MathJax configuration, and the second <code>{ ... }</code> is the code to run after MathJax has been loaded.  E.g.</p> <pre><code>require('mathjax').init({\nloader: {load: ['input/tex', 'output/svg']}\n}).then((MathJax) =&gt; {\nconst svg = MathJax.tex2svg('\\\\frac{1}{x^2-1}', {display: true});\nconsole.log(MathJax.startup.adaptor.outerHTML(svg));\n}).catch((err) =&gt; console.log(err.message));\n</code></pre> <p>Note: this technique is for node-based application only, not for browser applications.  This method sets up an alternative DOM implementation, which you don't need in the browser, and tells MathJax to use node's <code>require()</code> command to load external modules.  This setup will not work properly in the browser, even if you webpack it or bundle it in other ways.</p> <p>See the documentation and the MathJax Node Repository for more details.</p>"},{"location":"static/node_modules/mathjax/#reducing-the-size-of-the-components-directory","title":"Reducing the Size of the Components Directory","text":"<p>Since the <code>es5</code> directory contains all the component files, so if you are only planning one use one configuration, you can reduce the size of the MathJax directory by removing unused components. For example, if you are using the <code>tex-chtml.js</code> component, then you can remove the <code>tex-mml-chtml.js</code>, <code>tex-svg.js</code>, <code>tex-mml-svg.js</code>, <code>tex-chtml-full.js</code>, and <code>tex-svg-full.js</code> configurations, which will save considerable space.  Indeed, you should be able to remove everything other than <code>tex-chtml.js</code>, and the <code>input/tex/extensions</code>, <code>output/chtml/fonts/woff-v2</code>, <code>adaptors</code>, <code>a11y</code>, and <code>sre</code> directories.  If you are using the results only on the web, you can remove <code>adaptors</code> as well.</p> <p>If you are not using A11Y support (e.g., speech generation, or semantic enrichment), then you can remove <code>a11y</code> and <code>sre</code> as well (though in this case you may need to disable the assistive tools in the MathJax contextual menu in order to avoid MathJax trying to load them when they aren't there).</p> <p>If you are using SVG rather than CommonHTML output (e.g., <code>tex-svg.js</code> rather than <code>tex-chtml.js</code>), you can remove the <code>output/chtml/fonts/woff-v2</code> directory.  If you are using MathML input rather than TeX (e.g., <code>mml-chtml.js</code> rather than <code>tex-chtml.js</code>), then you can remove <code>input/tex/extensions</code> as well.</p>"},{"location":"static/node_modules/mathjax/#the-component-files-and-pull-requests","title":"The Component Files and Pull Requests","text":"<p>The <code>es5</code> directory is generated automatically from the contents of the MathJax source repository.  You can rebuild the components using the command</p> <pre><code>npm run make-es5 --silent\n</code></pre> <p>Note that since the contents of this repository are generated automatically, you should not submit pull requests that modify the contents of the <code>es5</code> directory.  If you wish to submit a modification to MathJax, you should make a pull request in the MathJax source repository.</p>"},{"location":"static/node_modules/mathjax/#mathjax-community","title":"MathJax Community","text":"<p>The main MathJax website is http://www.mathjax.org, and it includes announcements and other important information.  A MathJax user forum for asking questions and getting assistance is hosted at Google, and the MathJax bug tracker is hosted at GitHub.</p> <p>Before reporting a bug, please check that it has not already been reported.  Also, please use the bug tracker (rather than the help forum) for reporting bugs, and use the user's forum (rather than the bug tracker) for questions about how to use MathJax.</p>"},{"location":"static/node_modules/mathjax/#mathjax-resources","title":"MathJax Resources","text":"<ul> <li>MathJax Documentation</li> <li>MathJax Components</li> <li>MathJax Source Code</li> <li>MathJax Web Examples</li> <li>MathJax Node Examples</li> <li>MathJax Bug Tracker</li> <li>MathJax Users' Group</li> </ul>"}]}